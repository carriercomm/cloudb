//  
//  Log.cs
//  
//  Author:
//       Antonello Provenzano <antonello@deveel.com>
//       Tobias Downer <toby@mckoi.com>
// 
//  Copyright (c) 2009 Deveel
// 
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
// 
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using System.IO;

namespace Deveel.Data.Diagnostics {
	/// <summary>
	/// A log file/stream that logs some information generated by the system.
	/// </summary>
	/// <remarks>
	/// This is intended to help with debugging. It safely handles concurrent
	/// output to the log.
	/// </remarks>
	public class Log : IDisposable {
		/// <summary>
		/// The output stream where log information is output to.
		/// </summary>
		private readonly LogWriter log_output;


		///<summary>
		///</summary>
		///<param name="file"></param>
		///<param name="size"></param>
		///<param name="max_count"></param>
		public Log(string file, int size, int max_count) {
			log_output = new LogWriter(file, size, max_count);
		}

		///<summary>
		///</summary>
		///<param name="file"></param>
		public Log(string file)
			// Defaults to a maximum of 12 512k log files
			: this(file, 512*1024, 12) {
			//    this.log_output = new LogWriter(file, 512 * 1024, 12);
		}

		protected Log() {
			log_output = null;
		}

		/// <summary>
		/// A <see cref="Log"/> that won't actually store a log.
		/// </summary>
		/// <remarks>
		/// This is useful for options where the user doesn't want anything 
		/// logged.
		/// </remarks>
		public static Log Null {
			get { return new NullLog(); }
		}

		/// <summary>
		/// Writes an entry to the log file.
		/// </summary>
		/// <param name="text"></param>
		/// <remarks>
		/// The log file records the time the entry was put into the log, and 
		/// the string which is the log.
		/// </remarks>
		public virtual void Write(String text) {
			lock (this) {
				try {
					log_output.Write("[");
					log_output.Write(DateTime.Now.ToString());
					log_output.Write("] ");
					log_output.Write(text);
					log_output.Flush();
				} catch (IOException) {
				}
			}
		}

		///<summary>
		///</summary>
		///<param name="text"></param>
		public virtual void WriteLine(String text) {
			lock (this) {
				try {
					log_output.Write(text);
					log_output.WriteLine();
					log_output.Flush();
				} catch (IOException) {
				}
			}
		}

		/// <summary>
		/// Closes the log file.
		/// </summary>
		public virtual void Close() {
			lock (this) {
				try {
					log_output.Close();
				} catch (IOException) {
				}
			}
		}

		/// <summary>
		/// An implementation of Log that doesn't log anything.
		/// </summary>
		private class NullLog : Log {
			public override void Write(String text) {
				// Don't do anything,
			}

			public override void WriteLine(String text) {
				// Don't do anything,
			}

			public override void Close() {
				// Don't do anything,
			}
		}

		public void Dispose() {
			if (log_output != null)
				log_output.Dispose();
		}
	}
}